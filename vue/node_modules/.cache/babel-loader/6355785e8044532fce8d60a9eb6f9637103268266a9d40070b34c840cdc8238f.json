{"ast":null,"code":"import { ref } from 'vue';\nimport { RouterLink } from 'vue-router';\ndocument.body.style.overflow = 'hidden';\n// 导入 Home 组件\n\nexport default {\n  name: 'App',\n  // 在 components 属性中注册 Home 组件\n  components: {\n    RouterLink\n  },\n  setup() {\n    const loginMethod = ref('password');\n    const input1 = ref('');\n    const password = ref('');\n    const phoneNumber = ref('');\n    const verificationCode = ref('');\n    const checked = ref(true);\n    const errorMessage = ref('');\n    function setLoginMethod(method) {\n      loginMethod.value = method;\n    }\n    return {\n      loginMethod,\n      input1,\n      password,\n      phoneNumber,\n      verificationCode,\n      checked,\n      // checked: false, // 用户协议勾选状态\n      setLoginMethod,\n      errorMessage\n    };\n  },\n  data() {\n    return {\n      form: {\n        username: 'admin',\n        password: '123',\n        confirmPassword: '',\n        phoneNumber: '',\n        verificationCode: ''\n      },\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'change'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'change'\n        }],\n        confirmPassword: [{\n          required: true,\n          message: '请确认密码',\n          trigger: 'change'\n        }, {\n          validator: this.validateConfirmPassword,\n          trigger: 'change'\n        }],\n        phoneNumber: [{\n          required: true,\n          message: '请输入手机号',\n          trigger: 'change'\n        }],\n        verificationCode: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'change'\n        }]\n      },\n      successModalVisible: false\n    };\n  },\n  methods: {\n    async login() {\n      //发送登录请求\n      console.log('开始发送登录请求');\n      console.log(\"方法：\" + this.loginMethod);\n\n      // 创建一个对象，它将被发送到服务器作为登录请求的一部分\n      let loginPayload = {};\n      console.log(loginPayload);\n      if (this.loginMethod === 'password') {\n        loginPayload = {\n          username: this.form.username,\n          password: this.form.password\n        };\n      } else {\n        loginPayload = {\n          countryCode: this.form.countryCode,\n          phoneNumber: this.form.phoneNumber,\n          verificationCode: this.form.verificationCode\n        };\n      }\n      console.log(loginPayload);\n\n      // 发送请求判断是否登陆成功\n      this.$refs['userForm'].validate(valid => {\n        if (valid) {\n          // 表单校验合法\n          //发送请求\n          this.$Loading(\"登录中...\");\n          this.request.post(\"/login\", this.form).then(res => {\n            this.$Loading.close();\n            if (res.code !== 200) {\n              this.$message.error(\"用户名或密码错误\");\n            } else {\n              localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n              localStorage.setItem(\"token\", JSON.stringify(res.data.token));\n              localStorage.setItem(\"menus\", JSON.stringify(res.data.menus));\n              this.$router.replace(\"/home\");\n              this.$router.go(0); //登录之后：支付案例菜单的功能样式有问题，刷新后恢复正常，但登出后再次登录不跳转\n              this.$message.success(\"登录成功\");\n              console.log(\"登录成功...\");\n            }\n          });\n        } else {\n          console.log(\"valid==\" + valid);\n          return false;\n        }\n      });\n    },\n    onSubmit() {\n      this.successModalVisible = true;\n    },\n    validateConfirmPassword(rule, value, callback) {\n      if (value && value !== this.form.password) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    },\n    handleGetVerificationCode() {\n      // Implement your logic to get the verification code\n    },\n    redirectToLogin() {\n      this.successModalVisible = false;\n      this.$router.push('/home');\n    }\n  }\n};","map":{"version":3,"names":["ref","RouterLink","document","body","style","overflow","name","components","setup","loginMethod","input1","password","phoneNumber","verificationCode","checked","errorMessage","setLoginMethod","method","value","data","form","username","confirmPassword","rules","required","message","trigger","validator","validateConfirmPassword","successModalVisible","methods","login","console","log","loginPayload","countryCode","$refs","validate","valid","$Loading","request","post","then","res","close","code","$message","error","localStorage","setItem","JSON","stringify","user","token","menus","$router","replace","go","success","onSubmit","rule","callback","Error","handleGetVerificationCode","redirectToLogin","push"],"sources":["src/components/Login.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <p class=\"headline\">开启智能支付管理新体验</p>\n    </div>\n    <div class=\"row\">\n      <div class=\"description\">\n        <p><span class=\"yellow\">方便、快捷、高效</span><span class=\"black\">于一体的支付系统</span></p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"list-item-container\">\n        <ul class=\"list\">\n          <li class=\"list-item\">实现各个支付方式统一管理</li>\n          <li class=\"list-item\">处理线上异常交易订单</li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\" list-item-container-2\">\n        <ul class=\"list-2\">\n          <li class=\"list-item\">实现可视化检测</li>\n          <li class=\"list-item\">实现电子对账</li>\n        </ul>\n      </div>\n    </div>\n    <div id=\"app\">\n      <!-- 其他元素 -->\n      <router-view></router-view>\n\n      <!-- 其他元素 -->\n            <div class=\"form-container\">\n              <h1>欢迎来到</h1>\n              <br><br/>\n              <h2>德晟支付管理平台</h2>\n\n              <div class=\"button-group\">\n                <div class=\"button-container\">\n                  <button\n                      type=\"link\"\n                      @click=\"setLoginMethod('password')\"\n                  >账户密码登录</button>\n                  <div class=\"underline\" v-if=\"loginMethod === 'password'\"></div>\n                </div>\n\n                <div class=\"button-container\">\n                  <button\n                      type=\"link\"\n                      @click=\"setLoginMethod('phone')\"\n                  >手机号登录</button>\n                  <div class=\"underline\" v-if=\"loginMethod === 'phone'\"></div>\n                </div>\n              </div>\n              <br>\n              <div v-if=\"loginMethod === 'password'\">\n                <el-form :model=\"form\" :rules=\"rules\"  ref=\"userForm\">\n                  <!--<input v-model:value=\"form.username\" placeholder=\"请输入账号\" size=\"large\">\n                  <template #prefix>\n                    <UserOutlined style=\"color: rgba(0, 0, 0, 0.25)\"/>\n                  </template>\n                  </input>-->\n                  <el-form-item label=\"\" prop=\"username\">\n                    <el-input v-model=\"form.username\" placeholder=\"请输入账号\" prefix-icon=\"el-icon-user\"></el-input>\n                  </el-form-item>\n                  <el-form-item label=\"\" prop=\"password\">\n                    <el-input type=\"password\" v-model=\"form.password\" placeholder=\"请输入新密码\" prefix-icon=\"el-icon-lock\"></el-input>\n                  </el-form-item>\n                </el-form>\n                <!--<form>\n                  <password v-model:value=\"form.password\" placeholder=\"请输入新密码\" size=\"large\">\n                    <template #prefix>\n                      <LockOutlined style=\"color: rgba(0, 0, 0, 0.25)\"/>\n                    </template>\n                  </password>\n                </form>-->\n\n                <br>\n                <button type=\"primary\" @click=\"login\" class=\"login-button\" :disabled=\"!checked\">登录</button>\n                <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n              </div>\n\n              <div v-if=\"loginMethod === 'phone'\">\n                <el-form :model=\"form\" :rules=\"rules\"  ref=\"userForm\">\n                  <el-form-item label=\"\" prop=\"phoneNumber\">\n                    <el-input v-model=\"form.phoneNumber\" placeholder=\"请输入手机号\" prefix-icon=\"el-icon-mobile-phone\">\n                      <template #append>\n                        <el-button @click=\"handleGetVerificationCode\" type=\"primary\" size=\"small\">获取验证码</el-button>\n                      </template>\n                    </el-input>\n                  </el-form-item>\n                  <el-form-item label=\"\" prop=\"verificationCode\">\n                    <el-input v-model=\"form.verificationCode\" placeholder=\"请输入验证码\" suffix-icon=\"el-icon-message\"></el-input>\n                  </el-form-item>\n                </el-form>\n                <br>\n\n                <button type=\"primary\" @click=\"login\" class=\"login-button\" :disabled=\"!checked\">登录</button>\n                <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n              </div>\n\n\n\n              <div class=\"forgot-password-container\">\n                <router-link to=\"/forgotPassword\" class=\"link\">忘记密码</router-link>\n              </div>\n\n              <div class=\"register-container\">\n                <router-link to=\"/register\" class=\"link\">注册账户</router-link>\n              </div>\n\n              <div class=\"check-container\">\n                <input type=\"checkbox\" v-model:checked=\"checked\">\n                  同意\n                  <a href=\"/user-agreement\">用户协议</a>\n                  和\n                  <a href=\"/privacy-policy\">隐私协议</a>\n              </div>\n\n            </div>\n    </div>\n\n\n\n    <div>\n      <div class=\"logo\">\n        <img src=\"../assets/logo.png\" alt=\"徳晟图标\">\n      </div>\n    </div>\n    <div>\n      <p class=\"copyright\">copyright 2023徳晟光电股份有限公司版权所有 粤ICP备 </p>\n    </div>\n  </div>\n\n\n\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport { RouterLink } from 'vue-router';\ndocument.body.style.overflow = 'hidden';\n// 导入 Home 组件\n\nexport default {\n  name: 'App',\n  // 在 components 属性中注册 Home 组件\n  components: {\n    RouterLink\n  },\n  setup() {\n    const loginMethod = ref('password');\n    const input1 = ref('');\n    const password = ref('');\n    const phoneNumber = ref('');\n    const verificationCode = ref('');\n    const checked = ref(true);\n    const errorMessage = ref('');\n\n    function setLoginMethod(method) {\n      loginMethod.value = method;\n    }\n\n    return {\n      loginMethod,\n      input1,\n      password,\n      phoneNumber,\n      verificationCode,\n      checked,\n      // checked: false, // 用户协议勾选状态\n      setLoginMethod,\n      errorMessage,\n    };\n  },\n  data() {\n    return {\n      form: {\n        username: 'admin',\n        password: '123',\n        confirmPassword: '',\n        phoneNumber: '',\n        verificationCode: '',\n      },\n      rules: {\n        username: [\n          { required: true, message: '请输入用户名', trigger: 'change' },\n        ],\n        password: [\n          { required: true, message: '请输入密码', trigger: 'change' },\n        ],\n        confirmPassword: [\n          { required: true, message: '请确认密码', trigger: 'change' },\n          { validator: this.validateConfirmPassword, trigger: 'change' },\n        ],\n        phoneNumber: [\n          { required: true, message: '请输入手机号', trigger: 'change' },\n        ],\n        verificationCode: [\n          { required: true, message: '请输入验证码', trigger: 'change' },\n        ],\n      },\n      successModalVisible: false,\n    };\n  },\n  methods: {\n    async login() {\n      //发送登录请求\n      console.log('开始发送登录请求');\n      console.log(\"方法：\"+this.loginMethod);\n\n      // 创建一个对象，它将被发送到服务器作为登录请求的一部分\n      let loginPayload = {};\n      console.log(loginPayload);\n      if (this.loginMethod === 'password') {\n        loginPayload = {\n          username: this.form.username,\n          password: this.form.password,\n        };\n      } else {\n        loginPayload = {\n          countryCode: this.form.countryCode,\n          phoneNumber: this.form.phoneNumber,\n          verificationCode: this.form.verificationCode,\n        };\n      }\n      console.log(loginPayload);\n\n      // 发送请求判断是否登陆成功\n      this.$refs['userForm'].validate((valid) => {\n        if (valid) {  // 表单校验合法\n          //发送请求\n          this.$Loading(\"登录中...\")\n          this.request.post(\"/login\", this.form).then(res => {\n            this.$Loading.close()\n            if (res.code !== 200) {\n              this.$message.error(\"用户名或密码错误\")\n            } else {\n              localStorage.setItem(\"user\",JSON.stringify(res.data.user))\n              localStorage.setItem(\"token\",JSON.stringify(res.data.token))\n              localStorage.setItem(\"menus\",JSON.stringify(res.data.menus))\n              this.$router.replace(\"/home\")\n              this.$router.go(0)//登录之后：支付案例菜单的功能样式有问题，刷新后恢复正常，但登出后再次登录不跳转\n              this.$message.success(\"登录成功\")\n              console.log(\"登录成功...\")\n            }\n          })\n        } else {\n          console.log(\"valid==\"+valid);\n          return false;\n        }\n      });\n    },\n    onSubmit() {\n      this.successModalVisible = true;\n    },\n    validateConfirmPassword(rule, value, callback) {\n      if (value && value !== this.form.password) {\n        callback(new Error('两次输入的密码不一致'));\n      } else {\n        callback();\n      }\n    },\n    handleGetVerificationCode() {\n      // Implement your logic to get the verification code\n    },\n    redirectToLogin() {\n      this.successModalVisible = false;\n      this.$router.push('/home');\n    },\n  },\n}\n</script>\n\n<style>\nelement.style {\n  overflow: hidden;\n}\n.container {\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  box-sizing: border-box;\n  background-image: url('../assets/bg1.png');\n  background-size: cover; /* 调整背景图片的大小以填充容器 */\n  background-position: center;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.row {\n  display: flex; /* 使用弹性盒子布局 */\n  box-sizing: border-box; /* 这一行和下面几行是新添加的 */\n}\n\n.list-item-container{\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  position: fixed;\n  left: 63.26vw;\n  top: 26.13vh;\n  box-sizing: border-box; /* 这一行和下面几行是新添加的 */\n}\n\n\n.list-item {\n  display: flex; /* 将段落内容设置为弹性盒子布局 */\n  align-items: center; /* 垂直居中 */\n  margin: 0; /* 移除段落的默认边距 */\n  padding-left: 1.39vw; /* 调整左边距以留出空间放置大圆点 */\n  position: relative; /* 设置相对定位 */\n  width: 15.35vw;\n  height: 1.97vh;\n  font-family: MicrosoftYaHei;\n  font-size: 0.83vw;\n  color: #1C295F;\n  letter-spacing: 0.01vw;\n  box-sizing: border-box; /* 这一行和下面几行是新添加的 */\n\n}\n\n.list-item-container-2 {\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  position: fixed;\n  left: 86.39vw;\n  top: 26.13vh;\n}\n\n.list-item::before {\n  content: \"•\"; /* 使用伪元素添加大圆点 */\n  position: relative; /* 设置绝对定位 */\n  left: 0; /* 将大圆点放置在段落最左边 */\n  margin-right: 0.69vw; /* 调整大圆点与文本的间距 */\n}\n\n.list-item-inline {\n  display: inline-block;\n}\n\n\n.list-item {\n  margin-bottom: 20px;\n}\n\n.headline {\n  position: fixed;\n  left: 67.36vw; /* 将像素值转换为vw单位 */\n  top: 12.93vh; /* 将像素值转换为vh单位 */\n  width: 21.46vw; /* 将像素值转换为vw单位 */\n  height: 3.87vh; /* 将像素值转换为vh单位 */\n  font-family: MicrosoftYaHei-Bold;\n  font-weight: 700;\n  font-size: 1.53vw; /* 将像素值转换为vw单位 */\n  color: #1C295F;\n  letter-spacing: 0.16vw; /* 将像素值转换为vw单位 */\n  box-sizing: border-box; /* 这一行和下面几行是新添加的 */\n}\n.description {\n  position: fixed;\n  left: 69.65vw;\n  top: 20.13vh;\n}\n.yellow {\n  color: #ff7f00ff;\n  font-size: 14px;\n  font-face: [object Object];\n  font-weight: 0;\n  line-height: 0;\n  letter-spacing: 1.12px;\n  paragraph-spacing: 0;\n  text-align: left;\n}\n\n.black {\n  color: #1c295fff;\n  font-size: 14px;\n  font-face: [object Object];\n  font-weight: 0;\n  line-height: 0;\n  letter-spacing: 1.12px;\n  paragraph-spacing: 0;\n  text-align: left;\n}\n.logo {\n  position: fixed;\n  top: 43px;\n  left: 66px;\n  width: 186px;\n  height: 65px;\n}\n.copyright {\n  left: 9.44vw;\n  top: 93.6vh;\n  position: fixed;\n  width: 322px;\n  height: 20px;\n  font-family: PingFangSC-Regular;\n  font-weight: 400;\n  font-size: 12px;\n  color: #00000073;\n  line-height: 20px;\n}\n\n/*详细页面样式*/\n\n\n/*222*/\nh1{\n  top: 142px;\n  left: 78px;\n  position: fixed;\n  margin: 0;\n  width: 147px;\n  height: 45px;\n  font-family: MicrosoftYaHei-Bold;\n  font-weight: 700;\n  font-size: 34px;\n  color: #333333;\n  letter-spacing: 2.72px;\n}\nh2{\n  left: 78px;\n  top: 192px;\n  position: fixed;\n  margin: 0;\n  width: 303px;\n  height: 37px;\n  font-family: MicrosoftYaHei-Bold;\n  font-weight: 700;\n  font-size: 28px;\n  color: #333333;\n  letter-spacing: 2.24px;\n}\n\n.login-button{\n  width: 202px;\n  height: 49px;\n  background: #1890FF;\n  box-shadow: 0 2px 13px 3px #1890ff4a;\n  border-radius: 30px;\n  left: 78px;\n  top: 533px;\n  position: fixed;\n}\n\n.forgot-password-container {\n  left: 394px;\n  top: 490px;\n  position: fixed;\n  margin-top: 20px;\n}\n\n.register-container {\n  left: 394px;\n  top: 553px;\n  position: fixed;\n  margin-top: 10px;\n}\n.check-container{\n  left: 78px;\n  top: 604px;\n  position: fixed;\n}\n.link {\n  font-size: 14px;\n  color: #1890FF;\n  text-decoration: none;\n}\n.error-message {\n  color: #ff0000;\n  left: 78px;\n  top: 490px;\n  position: fixed;\n}\n.button-group {\n  position: fixed;\n  left: 61px;\n  top: 260px;\n  display: flex;\n  justify-content: space-between;\n}\n\n\n.button-container {\n  position: relative;\n  margin-right: 100px;\n}\n\n.underline {\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 131px;\n  height: 2px;\n  background-color: #1890ff;\n}\n.form-container {\n  position: fixed;\n  top: 276px;\n  left: 38px;\n  width: 380px;\n  height: 60px;\n}\n.error-message {\n  color: red;\n}\n\n.wrapper {\n  height: 100vh;\n  background-image: linear-gradient(to bottom right, #FC466B, #3F5EFB);\n  overflow: hidden;\n}\n\n</style>\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}