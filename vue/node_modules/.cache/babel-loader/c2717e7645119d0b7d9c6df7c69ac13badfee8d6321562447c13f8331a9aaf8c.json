{"ast":null,"code":"export default {\n  name: \"Role\",\n  data() {\n    return {\n      tableData: [],\n      total: 0,\n      pageNum: 1,\n      pageSize: 10,\n      name: \"\",\n      form: {},\n      dialogFormVisible: false,\n      menuDialogVis: false,\n      multipleSelection: [],\n      menuData: [],\n      props: {\n        label: 'name'\n      },\n      expends: [],\n      checks: [],\n      roleId: 0,\n      roleFlag: '',\n      ids: []\n    };\n  },\n  methods: {\n    load() {\n      this.request.get(\"/role/page\", {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          name: this.name\n        }\n      }).then(res => {\n        this.tableData = res.data.records;\n        this.total = res.data.total;\n      });\n      this.request.get(\"/menu/ids\").then(r => {\n        this.ids = r.data;\n      });\n    },\n    save() {\n      this.request.post(\"/role\", this.form).then(res => {\n        if (res.code === 200) {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    saveRoleMenu() {\n      this.request.post(\"/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys()).then(res => {\n        let localRoleId = JSON.parse(localStorage.getItem(\"user\")).role.map(k => k.id);\n        if (res.code === 200) {\n          this.$message.success(\"绑定成功\");\n          this.menuDialogVis = false;\n          // 操作管理员角色后需要重新登录\n          if (localRoleId.indexOf(this.roleId) >= 0) {\n            this.$store.commit(\"logout\");\n          }\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {};\n    },\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.dialogFormVisible = true;\n    },\n    del(id) {\n      this.request.delete(\"/role/\" + id).then(res => {\n        if (res.code === 200) {\n          this.$message.success(\"删除成功\");\n          this.load();\n        } else {\n          if (res.msg !== '') {\n            this.$message.error(res.msg);\n          } else {\n            this.$message.error(\"删除失败\");\n          }\n        }\n      });\n    },\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); // [{}, {}, {}] => [1,2,3]\n      if (ids.length === 0) {\n        this.$message.warning(\"请选择删除的角色\");\n        return;\n      }\n      this.request.post(\"/role/del/batch\", ids).then(res => {\n        if (res.code === 200) {\n          this.$message.success(\"批量删除成功\");\n          this.load();\n        } else {\n          if (res.msg !== '') {\n            this.$message.error(res.msg);\n          } else {\n            this.$message.error(\"删除失败\");\n          }\n        }\n      });\n    },\n    reset() {\n      this.name = \"\";\n      this.load();\n    },\n    handleSizeChange(pageSize) {\n      console.log(pageSize);\n      this.pageSize = pageSize;\n      this.load();\n    },\n    handleCurrentChange(pageNum) {\n      console.log(pageNum);\n      this.pageNum = pageNum;\n      this.load();\n    },\n    async selectMenu(role) {\n      this.expends = [];\n      this.checks = [];\n      this.roleId = role.id;\n      this.roleFlag = role.flag;\n\n      // 请求菜单数据\n      this.request.get(\"/menu\").then(res => {\n        this.menuData = res.data;\n        // 把后台返回的菜单数据处理成 id数组\n        this.expends = this.menuData.map(v => v.id);\n      });\n      this.request.get(\"/role/roleMenu/\" + this.roleId).then(res => {\n        this.checks = res.data;\n        this.$nextTick(() => {\n          setTimeout(() => {\n            this.ids.forEach(id => {\n              // 可能会报错：Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'setChecked')\n              //把选中父节点后默认全选的子节点取消选中\n              if (this.checks.indexOf(id) < 0) this.$refs.tree.setChecked(id, false);\n            });\n            //设置延时，因为只有弹框渲染出来，才能通过this.$refs.tree取到组件\n          }, 3);\n        });\n      });\n      this.menuDialogVis = true;\n    }\n  },\n  created() {\n    this.load();\n  }\n};","map":{"version":3,"names":["name","data","tableData","total","pageNum","pageSize","form","dialogFormVisible","menuDialogVis","multipleSelection","menuData","props","label","expends","checks","roleId","roleFlag","ids","methods","load","request","get","params","then","res","records","r","save","post","code","$message","success","error","saveRoleMenu","$refs","tree","getCheckedKeys","localRoleId","JSON","parse","localStorage","getItem","role","map","k","id","indexOf","$store","commit","msg","handleAdd","handleEdit","row","stringify","del","delete","handleSelectionChange","val","console","log","delBatch","v","length","warning","reset","handleSizeChange","handleCurrentChange","selectMenu","flag","$nextTick","setTimeout","forEach","setChecked","created"],"sources":["src/views/Role.vue"],"sourcesContent":["<template>\n    <div>\n        <div style=\"margin: 10px 0\">\n            <el-input style=\"width: 200px\" placeholder=\"请输入名称\" suffix-icon=\"el-icon-search\" v-model=\"name\"></el-input>\n            <!--      <el-input style=\"width: 200px\" placeholder=\"请输入邮箱\" suffix-icon=\"el-icon-message\" class=\"ml-5\" v-model=\"email\"></el-input>-->\n            <!--      <el-input style=\"width: 200px\" placeholder=\"请输入地址\" suffix-icon=\"el-icon-position\" class=\"ml-5\" v-model=\"address\"></el-input>-->\n            <el-button class=\"ml-5\" type=\"primary\" @click=\"load\">搜索</el-button>\n            <el-button type=\"info\" @click=\"reset\">重置</el-button>\n        </div>\n\n        <div style=\"margin: 10px 0\">\n            <el-button type=\"primary\" @click=\"handleAdd\">新增 <i class=\"el-icon-circle-plus-outline\"></i></el-button>\n            <el-popconfirm\n                    class=\"ml-5\"\n                    confirm-button-text='确定'\n                    cancel-button-text='我再想想'\n                    icon=\"el-icon-info\"\n                    icon-color=\"red\"\n                    title=\"您确定批量删除这些数据吗？\"\n                    @confirm=\"delBatch\"\n            >\n                <el-button type=\"danger\" slot=\"reference\">批量删除 <i class=\"el-icon-remove-outline\"></i></el-button>\n            </el-popconfirm>\n            <!--      <el-upload action=\"http://localhost:9090/user/import\" :show-file-list=\"false\" accept=\"xlsx\" :on-success=\"handleExcelImportSuccess\" style=\"display: inline-block\">-->\n            <!--        <el-button type=\"primary\" class=\"ml-5\">导入 <i class=\"el-icon-bottom\"></i></el-button>-->\n            <!--      </el-upload>-->\n            <!--      <el-button type=\"primary\" @click=\"exp\" class=\"ml-5\">导出 <i class=\"el-icon-top\"></i></el-button>-->\n        </div>\n\n        <el-table :data=\"tableData\" border stripe :header-cell-class-name=\"'headerBg'\"\n                  @selection-change=\"handleSelectionChange\">\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n            <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"名称\"></el-table-column>\n            <el-table-column prop=\"roleKey\" label=\"唯一标识\"></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column label=\"操作\" width=\"280\" align=\"center\">\n                <template slot-scope=\"scope\">\n                    <el-button type=\"info\" @click=\"selectMenu(scope.row)\">分配菜单 <i class=\"el-icon-menu\"></i></el-button>\n                    <el-button type=\"success\" @click=\"handleEdit(scope.row)\">编辑 <i class=\"el-icon-edit\"></i></el-button>\n                    <el-popconfirm\n                            class=\"ml-5\"\n                            confirm-button-text='确定'\n                            cancel-button-text='我再想想'\n                            icon=\"el-icon-info\"\n                            icon-color=\"red\"\n                            title=\"您确定删除吗？\"\n                            @confirm=\"del(scope.row.id)\"\n                    >\n                        <el-button type=\"danger\" slot=\"reference\">删除 <i class=\"el-icon-remove-outline\"></i></el-button>\n                    </el-popconfirm>\n                </template>\n            </el-table-column>\n        </el-table>\n        <div style=\"padding: 10px 0\">\n            <el-pagination\n                    @size-change=\"handleSizeChange\"\n                    @current-change=\"handleCurrentChange\"\n                    :current-page=\"pageNum\"\n                    :page-sizes=\"[2, 5, 10, 20]\"\n                    :page-size=\"pageSize\"\n                    layout=\"total, sizes, prev, pager, next, jumper\"\n                    :total=\"total\">\n            </el-pagination>\n        </div>\n\n        <el-dialog title=\"角色信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\n            <el-form label-width=\"80px\" size=\"small\">\n                <el-form-item label=\"名称\">\n                    <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"唯一标识\">\n                    <el-input v-model=\"form.roleKey\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"描述\">\n                    <el-input v-model=\"form.description\" autocomplete=\"off\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"save\">确 定</el-button>\n            </div>\n        </el-dialog>\n\n        <el-dialog title=\"菜单分配\" :visible.sync=\"menuDialogVis\" width=\"30%\">\n            <el-tree\n                    :props=\"props\"\n                    :data=\"menuData\"\n                    show-checkbox\n                    node-key=\"id\"\n                    ref=\"tree\"\n                    :default-expanded-keys=\"expends\"\n                    :default-checked-keys=\"checks\">\n         <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n            <span><i :class=\"data.icon\"></i> {{ data.name }}</span>\n         </span>\n            </el-tree>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"menuDialogVis = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"saveRoleMenu\">确 定</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"Role\",\n        data() {\n            return {\n                tableData: [],\n                total: 0,\n                pageNum: 1,\n                pageSize: 10,\n                name: \"\",\n                form: {},\n                dialogFormVisible: false,\n                menuDialogVis: false,\n                multipleSelection: [],\n                menuData: [],\n                props: {\n                    label: 'name',\n                },\n                expends: [],\n                checks: [],\n                roleId: 0,\n                roleFlag: '',\n                ids: []\n            }\n        },\n        methods: {\n            load() {\n                this.request.get(\"/role/page\", {\n                    params: {\n                        pageNum: this.pageNum,\n                        pageSize: this.pageSize,\n                        name: this.name,\n                    }\n                }).then(res => {\n                    this.tableData = res.data.records\n                    this.total = res.data.total\n                })\n\n                this.request.get(\"/menu/ids\").then(r => {\n                    this.ids = r.data\n                })\n\n            },\n            save() {\n                this.request.post(\"/role\", this.form).then(res => {\n                    if (res.code === 200) {\n                        this.$message.success(\"保存成功\")\n                        this.dialogFormVisible = false\n                        this.load()\n                    } else {\n                        this.$message.error(\"保存失败\")\n                    }\n                })\n            },\n            saveRoleMenu() {\n                this.request.post(\"/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys()).then(res => {\n                    let localRoleId = JSON.parse(localStorage.getItem(\"user\")).role.map(k => k.id);\n                    if (res.code === 200) {\n                        this.$message.success(\"绑定成功\")\n                        this.menuDialogVis = false\n                        // 操作管理员角色后需要重新登录\n                        if (localRoleId.indexOf(this.roleId) >= 0) {\n                            this.$store.commit(\"logout\")\n                        }\n\n                    } else {\n                        this.$message.error(res.msg)\n                    }\n                })\n            },\n            handleAdd() {\n                this.dialogFormVisible = true\n                this.form = {}\n            },\n            handleEdit(row) {\n                this.form = JSON.parse(JSON.stringify(row))\n                this.dialogFormVisible = true\n            },\n            del(id) {\n                this.request.delete(\"/role/\" + id).then(res => {\n                    if (res.code === 200) {\n                        this.$message.success(\"删除成功\")\n                        this.load()\n                    } else {\n                        if(res.msg!==''){\n                            this.$message.error(res.msg)\n                        }else{\n                            this.$message.error(\"删除失败\")\n                        }\n                    }\n                })\n            },\n            handleSelectionChange(val) {\n                console.log(val)\n                this.multipleSelection = val\n            },\n            delBatch() {\n                let ids = this.multipleSelection.map(v => v.id)  // [{}, {}, {}] => [1,2,3]\n                if(ids.length===0){\n                    this.$message.warning(\"请选择删除的角色\")\n                    return\n                }\n                this.request.post(\"/role/del/batch\", ids).then(res => {\n                    if (res.code === 200) {\n                        this.$message.success(\"批量删除成功\")\n                        this.load()\n                    } else {\n                        if(res.msg!==''){\n                            this.$message.error(res.msg)\n                        }else{\n                            this.$message.error(\"删除失败\")\n                        }\n                    }\n                })\n            },\n            reset() {\n                this.name = \"\"\n                this.load()\n            },\n            handleSizeChange(pageSize) {\n                console.log(pageSize)\n                this.pageSize = pageSize\n                this.load()\n            },\n            handleCurrentChange(pageNum) {\n                console.log(pageNum)\n                this.pageNum = pageNum\n                this.load()\n            },\n            async selectMenu(role) {\n                this.expends = []\n                this.checks = []\n                this.roleId = role.id\n                this.roleFlag = role.flag\n\n                // 请求菜单数据\n                this.request.get(\"/menu\").then(res => {\n                    this.menuData = res.data\n                    // 把后台返回的菜单数据处理成 id数组\n                    this.expends = this.menuData.map(v => v.id)\n                })\n\n                this.request.get(\"/role/roleMenu/\" + this.roleId).then(res => {\n                    this.checks = res.data\n                    this.$nextTick(() => {\n                        setTimeout(() => {\n                            this.ids.forEach(id => {\n                                // 可能会报错：Uncaught (in promise) TypeError: Cannot read properties of undefined (reading 'setChecked')\n                                //把选中父节点后默认全选的子节点取消选中\n                                if(this.checks.indexOf(id)<0)\n                                this.$refs.tree.setChecked(id,false)\n                            })\n                            //设置延时，因为只有弹框渲染出来，才能通过this.$refs.tree取到组件\n                        }, 3)\n\n                    })\n                })\n\n                this.menuDialogVis = true\n            },\n        },\n        created() {\n            this.load()\n        },\n\n    }\n</script>\n\n\n<style>\n    .headerBg {\n        background: #eee !important;\n    }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}