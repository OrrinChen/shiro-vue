{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nimport ElementUI from \"element-ui\";\nconst request = axios.create({\n  baseURL: `http://192.168.20.215:9292`,\n  timeout: 30000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : \"\";\n  let token = localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\")) : \"\";\n  if (user) {\n    config.headers['token'] = token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.headers === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n    console.log(res);\n  }\n  let refreshtoken = response.headers.refreshtoken;\n  if (refreshtoken) {\n    console.log(refreshtoken);\n  }\n  if (refreshtoken !== undefined && refreshtoken !== \"\") {\n    localStorage.setItem(\"token\", JSON.stringify(refreshtoken));\n    console.log(\"token续期成功\");\n  }\n  if (res.code === 401 || res.code === 403) {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n  }\n  if (res.code === 4001) {\n    ElementUI.Message({\n      message: res.msg,\n      type: 'error'\n    });\n    localStorage.clear();\n    router.replace(\"/login\");\n  }\n  return res;\n}, error => {\n  console.log(error);\n  let res = JSON.parse(error.request.response);\n  console.log('err' + error); // for debug\n  ElementUI.Message({\n    message: res.msg,\n    type: 'error'\n  });\n  // if(res.code===401){\n  //     router.replace(\"/login\")\n  // }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","ElementUI","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","console","log","refreshtoken","undefined","setItem","stringify","code","Message","message","msg","type","clear","replace"],"sources":["F:/default/Desktop/shiro-vue/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\nimport ElementUI from \"element-ui\";\n\nconst request = axios.create({\n    baseURL: `http://192.168.20.215:9292`,\n    timeout: 30000,\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n    let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : \"\"\n    let token = localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\")) : \"\"\n    if (user) {\n        config.headers['token'] = token;  // 设置请求头\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.headers === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n            console.log(res)\n        }\n        let refreshtoken = response.headers.refreshtoken\n        if(refreshtoken){\n            console.log(refreshtoken)\n        }\n        if(refreshtoken!==undefined&&refreshtoken!==\"\"){\n            localStorage.setItem(\"token\",JSON.stringify(refreshtoken))\n            console.log(\"token续期成功\")\n        }\n\n        if (res.code === 401||res.code===403) {\n            ElementUI.Message({\n                message: res.msg,\n                type: 'error'\n            });\n        }\n\n        if (res.code === 4001) {\n            ElementUI.Message({\n                message: res.msg,\n                type: 'error'\n            });\n            localStorage.clear()\n            router.replace(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log(error)\n        let res = JSON.parse(error.request.response)\n        console.log('err' + error) // for debug\n        ElementUI.Message({\n            message: res.msg,\n            type: 'error'\n        });\n        // if(res.code===401){\n        //     router.replace(\"/login\")\n        // }\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}