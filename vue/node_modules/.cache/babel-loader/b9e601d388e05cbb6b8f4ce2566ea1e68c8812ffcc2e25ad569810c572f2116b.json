{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport store from \"@/store\";\nVue.use(VueRouter);\n\n// 解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\n// 在index.js 里面写入下面的代码即可解决\nconst originalReplace = VueRouter.prototype.replace;\nVueRouter.prototype.replace = function replace(location) {\n  return originalReplace.call(this, location).catch(err => err);\n};\nconst routes = [{\n  path: '/login-bak',\n  name: 'Login-bak',\n  component: () => import(\"@/views/Login-bak.vue\")\n}, {\n  path: '/register-bak',\n  name: 'Register-bak',\n  component: () => import(\"@/views/Register-bak.vue\")\n},\n/*{\n    path: '/forgotPassword',\n    name: 'ForgotPassword',\n    component: () => import(\"@/components/ForgotPassword-2.vue\")\n},*/\n/*{\n    path: '/test',\n    name: 'Test',\n    component: () => import(\"@/components/Test.vue\")\n},*/\n{\n  path: '/basic',\n  name: 'Basic',\n  component: () => import(\"@/components/Basic.vue\")\n}, {\n  path: '/forgotPassword',\n  name: 'ForgotPassword',\n  component: () => import(\"@/components/ForgotPassword.vue\")\n}, {\n  path: '/register',\n  name: 'Register',\n  component: () => import(\"@/components/Register.vue\")\n}, {\n  path: '/login',\n  name: 'Login',\n  component: () => import(\"@/components/Login.vue\")\n},\n/*{\n    path: '/login-test',\n    name: 'Login-test',\n    component: () => import(\"@/components/Login-test.vue\")\n},*/\n{\n  path: '*',\n  name: '404',\n  component: () => import('@/views/404.vue')\n} /*,\n  {\n     path: '/success',\n     name: 'Success',\n     component: () => import('@/views/Success.vue')\n  }*/];\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes\n});\n\n// 提供一个重置路由的方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    mode: 'history',\n    base: process.env.BASE_URL,\n    routes\n  });\n};\n\n// 检查是否存在于免登陆白名单\nfunction inWhiteList(toPath) {\n  const whiteList = ['/login', '/register', '/forgotPassword', '/404', '/basic' /*, '/basic2', '/basic3', '/basic4', '/test', '/login-test'*/];\n  const path = whiteList.find(value => {\n    // 使用正则匹配\n    const reg = new RegExp('^' + value);\n    return reg.test(toPath);\n  });\n  return !!path;\n}\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = {\n      path: '/',\n      name: 'Manage',\n      component: () => import('../views/Manage.vue'),\n      redirect: \"/home\",\n      children: [{\n        path: 'person',\n        name: '个人信息',\n        component: () => import('../views/Person.vue')\n      }, {\n        path: 'password',\n        name: '修改密码',\n        component: () => import('../views/Password.vue')\n      }]\n    };\n    const menus = JSON.parse(storeMenus);\n    menus.forEach(item => {\n      if (item.path) {\n        // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = {\n          path: item.path.replace(\"/\", \"\"),\n          name: item.name,\n          component: () => import('../views/' + item.pagePath + '.vue')\n        };\n        manageRoute.children.push(itemMenu);\n      } else if (item.children.length) {\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {\n              path: item.path.replace(\"/\", \"\"),\n              name: item.name,\n              component: () => import('../views/' + item.pagePath + '.vue')\n            };\n            manageRoute.children.push(itemMenu);\n          }\n        });\n      }\n    });\n    // 获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n    if (!currentRouteNames.includes('Manage')) {\n      // 动态添加到现在的路由对象中去\n      router.addRoute(manageRoute);\n    }\n  }\n};\n\n// 刷新重置我就再set一次路由\n//setRoutes()\n\nrouter.beforeEach((to, from, next) => {\n  let hasRoutes = store.state.hasRoutes;\n  const token = localStorage.getItem(\"token\");\n  if (inWhiteList(to.path)) {\n    next();\n  } else {\n    //用户已登录\n    if (token) {\n      if (!hasRoutes) {\n        //页面刷新的情况，vuex中的数据刷新会丢失\n        setRoutes();\n        store.commit(\"SET_ROUTES_STATE\", true);\n        next(to.path);\n      }\n      next();\n    } else {\n      next(`/login`);\n    }\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","store","use","originalPush","prototype","push","location","call","catch","err","originalReplace","replace","routes","path","name","component","router","mode","resetRouter","matcher","base","process","env","BASE_URL","inWhiteList","toPath","whiteList","find","value","reg","RegExp","test","setRoutes","storeMenus","localStorage","getItem","manageRoute","redirect","children","menus","JSON","parse","forEach","item","itemMenu","pagePath","length","currentRouteNames","getRoutes","map","v","includes","addRoute","beforeEach","to","from","next","hasRoutes","state","token","commit"],"sources":["F:/default/Desktop/shiro-vue/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport store from \"@/store\"\nVue.use(VueRouter)\n\n// 解决ElementUI导航栏中的vue-router在3.0版本以上重复点菜单报错问题\nconst originalPush = VueRouter.prototype.push\nVueRouter.prototype.push = function push(location) {\n    return originalPush.call(this, location).catch(err => err)\n}\n// 在index.js 里面写入下面的代码即可解决\nconst originalReplace = VueRouter.prototype.replace;\nVueRouter.prototype.replace = function replace(location) {\n    return originalReplace.call(this, location).catch(err => err);\n};\n\nconst routes = [\n    {\n        path: '/login-bak',\n        name: 'Login-bak',\n        component: () => import(\"@/views/Login-bak.vue\")\n    },\n    {\n        path: '/register-bak',\n        name: 'Register-bak',\n        component: () => import(\"@/views/Register-bak.vue\")\n    },\n    /*{\n        path: '/forgotPassword',\n        name: 'ForgotPassword',\n        component: () => import(\"@/components/ForgotPassword-2.vue\")\n    },*/\n    /*{\n        path: '/test',\n        name: 'Test',\n        component: () => import(\"@/components/Test.vue\")\n    },*/\n    {\n        path: '/basic',\n        name: 'Basic',\n        component: () => import(\"@/components/Basic.vue\")\n    },\n    {\n        path: '/forgotPassword',\n        name: 'ForgotPassword',\n        component: () => import(\"@/components/ForgotPassword.vue\")\n    },\n    {\n        path: '/register',\n        name: 'Register',\n        component: () => import(\"@/components/Register.vue\")\n    },\n    {\n        path: '/login',\n        name: 'Login',\n        component: () => import(\"@/components/Login.vue\")\n    },\n    /*{\n        path: '/login-test',\n        name: 'Login-test',\n        component: () => import(\"@/components/Login-test.vue\")\n    },*/\n    {\n        path: '*',\n        name: '404',\n        component: () => import('@/views/404.vue')\n    }/*,\n    {\n        path: '/success',\n        name: 'Success',\n        component: () => import('@/views/Success.vue')\n    }*/\n]\n\nconst router = new VueRouter({\n    mode: 'history',\n    routes\n})\n\n// 提供一个重置路由的方法\nexport const resetRouter = () => {\n    router.matcher = new VueRouter({\n        mode: 'history',\n        base: process.env.BASE_URL,\n        routes\n    })\n}\n\n// 检查是否存在于免登陆白名单\nfunction inWhiteList(toPath) {\n    const whiteList = ['/login', '/register', '/forgotPassword', '/404', '/basic'/*, '/basic2', '/basic3', '/basic4', '/test', '/login-test'*/]\n    const path = whiteList.find((value) => {\n        // 使用正则匹配\n        const reg = new RegExp('^' + value)\n        return reg.test(toPath)\n    })\n    return !!path\n}\n\nexport const setRoutes = () => {\n    const storeMenus = localStorage.getItem(\"menus\")\n    if (storeMenus) {\n        // 拼装动态路由\n        const manageRoute = {\n            path: '/', name: 'Manage', component: () => import('../views/Manage.vue'), redirect: \"/home\", children: [\n                {path: 'person', name: '个人信息', component: () => import('../views/Person.vue')},\n                {path: 'password', name: '修改密码', component: () => import('../views/Password.vue')}\n            ]\n        }\n        const menus = JSON.parse(storeMenus)\n        menus.forEach(item => {\n            if (item.path) {  // 当且仅当path不为空的时候才去设置路由\n                let itemMenu = {\n                    path: item.path.replace(\"/\", \"\"),\n                    name: item.name,\n                    component: () => import('../views/' + item.pagePath + '.vue')\n                }\n                manageRoute.children.push(itemMenu)\n            } else if (item.children.length) {\n                item.children.forEach(item => {\n                    if (item.path) {\n                        let itemMenu = {\n                            path: item.path.replace(\"/\", \"\"),\n                            name: item.name,\n                            component: () => import('../views/' + item.pagePath + '.vue')\n                        }\n                        manageRoute.children.push(itemMenu)\n                    }\n                })\n            }\n        })\n        // 获取当前的路由对象名称数组\n        const currentRouteNames = router.getRoutes().map(v => v.name)\n        if (!currentRouteNames.includes('Manage')) {\n            // 动态添加到现在的路由对象中去\n            router.addRoute(manageRoute)\n        }\n    }\n}\n\n// 刷新重置我就再set一次路由\n//setRoutes()\n\nrouter.beforeEach((to, from, next) => {\n    let hasRoutes = store.state.hasRoutes;\n    const token = localStorage.getItem(\"token\")\n    if (inWhiteList(to.path)) {\n        next()\n    } else {\n        //用户已登录\n        if (token) {\n            if (!hasRoutes) { //页面刷新的情况，vuex中的数据刷新会丢失\n                setRoutes()\n                store.commit(\"SET_ROUTES_STATE\", true);\n                next(to.path)\n            }\n            next()\n        } else {\n            next(`/login`)\n        }\n    }\n})\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}