{"ast":null,"code":"export default {\n  name: \"Person\",\n  data() {\n    return {\n      uploadHeaders: {\n        \"token\": this.$store.state.uploadHeaders\n      },\n      form: {},\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n    };\n  },\n  created() {\n    this.getUser().then(res => {\n      console.log(res);\n      this.form = res;\n    });\n  },\n  methods: {\n    async getUser() {\n      return (await this.request.get(\"/user/username/\" + this.user.username)).data;\n    },\n    save() {\n      this.request.post(\"/user\", this.form).then(res => {\n        if (res.code === 200) {\n          this.$message.success(\"保存成功\");\n          // 更新浏览器存储的用户信息\n          this.getUser().then(res => {\n            localStorage.setItem(\"user\", JSON.stringify(res));\n            this.$store.commit(\"changeAvatarUrl\");\n          });\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    handleAvatarSuccess(res) {\n      this.form.avatarUrl = res.data;\n      console.log(res.data);\n    },\n    beforeUpload() {\n      this.uploadHeaders = {\n        \"token\": localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\")) : {}\n      };\n    }\n  }\n};","map":{"version":3,"names":["name","data","uploadHeaders","$store","state","form","user","localStorage","getItem","JSON","parse","created","getUser","then","res","console","log","methods","request","get","username","save","post","code","$message","success","setItem","stringify","commit","error","handleAvatarSuccess","avatarUrl","beforeUpload"],"sources":["src/views/Person.vue"],"sourcesContent":["<template>\n    <el-card style=\"width: 500px;\">\n        <el-form label-width=\"80px\" size=\"small\">\n            <el-upload\n                    class=\"avatar-uploader\"\n                    action=\"http://localhost:9090/file/upload\"\n                    :show-file-list=\"false\"\n                    :on-success=\"handleAvatarSuccess\"\n                    :headers=\"uploadHeaders\"\n                    :before-upload=\"beforeUpload\"\n            >\n                <img v-if=\"form.avatarUrl\" :src=\"form.avatarUrl\" class=\"avatar\">\n                <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n            </el-upload>\n\n            <el-form-item label=\"用户名\">\n                <el-input v-model=\"form.username\" disabled autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"昵称\">\n                <el-input v-model=\"form.nickname\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"邮箱\">\n                <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"电话\">\n                <el-input v-model=\"form.phonenumber\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"地址\">\n                <el-input type=\"textarea\" v-model=\"form.address\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item>\n                <el-button type=\"primary\" @click=\"save\">确 定</el-button>\n            </el-form-item>\n        </el-form>\n    </el-card>\n</template>\n\n<script>\n\n    export default {\n        name: \"Person\",\n        data() {\n            return {\n                uploadHeaders: {\"token\": this.$store.state.uploadHeaders},\n                form: {},\n                user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n            }\n        },\n        created() {\n            this.getUser().then(res => {\n                console.log(res)\n                this.form = res\n            })\n        },\n        methods: {\n            async getUser() {\n                return (await this.request.get(\"/user/username/\" + this.user.username)).data\n            },\n            save() {\n                this.request.post(\"/user\", this.form).then(res => {\n                    if (res.code === 200) {\n                        this.$message.success(\"保存成功\")\n                        // 更新浏览器存储的用户信息\n                        this.getUser().then(res => {\n                            localStorage.setItem(\"user\", JSON.stringify(res))\n                            this.$store.commit(\"changeAvatarUrl\")\n                        })\n                    } else {\n                        this.$message.error(\"保存失败\")\n                    }\n                })\n            },\n            handleAvatarSuccess(res) {\n                this.form.avatarUrl = res.data\n                console.log(res.data)\n            },\n            beforeUpload(){\n                this.uploadHeaders ={\"token\": localStorage.getItem(\"token\") ? JSON.parse(localStorage.getItem(\"token\")) : {}}\n            },\n        }\n    }\n</script>\n\n<style>\n    .avatar-uploader {\n        text-align: center;\n        padding-bottom: 10px;\n    }\n\n    .avatar-uploader .el-upload {\n        border: 1px dashed #d9d9d9;\n        border-radius: 6px;\n        cursor: pointer;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .avatar-uploader .el-upload:hover {\n        border-color: #409EFF;\n    }\n\n    .avatar-uploader-icon {\n        font-size: 28px;\n        color: #8c939d;\n        width: 138px;\n        height: 138px;\n        line-height: 138px;\n        text-align: center;\n    }\n\n    .avatar {\n        width: 138px;\n        height: 138px;\n        display: block;\n    }\n</style>\n"],"mappings":"AAuCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;QAAA,cAAAC,MAAA,CAAAC,KAAA,CAAAF;MAAA;MACAG,IAAA;MACAC,IAAA,EAAAC,YAAA,CAAAC,OAAA,WAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;IACA;EACA;EACAG,QAAA;IACA,KAAAC,OAAA,GAAAC,IAAA,CAAAC,GAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA,KAAAT,IAAA,GAAAS,GAAA;IACA;EACA;EACAG,OAAA;IACA,MAAAL,QAAA;MACA,mBAAAM,OAAA,CAAAC,GAAA,0BAAAb,IAAA,CAAAc,QAAA,GAAAnB,IAAA;IACA;IACAoB,KAAA;MACA,KAAAH,OAAA,CAAAI,IAAA,eAAAjB,IAAA,EAAAQ,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAS,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA;UACA,KAAAb,OAAA,GAAAC,IAAA,CAAAC,GAAA;YACAP,YAAA,CAAAmB,OAAA,SAAAjB,IAAA,CAAAkB,SAAA,CAAAb,GAAA;YACA,KAAAX,MAAA,CAAAyB,MAAA;UACA;QACA;UACA,KAAAJ,QAAA,CAAAK,KAAA;QACA;MACA;IACA;IACAC,oBAAAhB,GAAA;MACA,KAAAT,IAAA,CAAA0B,SAAA,GAAAjB,GAAA,CAAAb,IAAA;MACAc,OAAA,CAAAC,GAAA,CAAAF,GAAA,CAAAb,IAAA;IACA;IACA+B,aAAA;MACA,KAAA9B,aAAA;QAAA,SAAAK,YAAA,CAAAC,OAAA,YAAAC,IAAA,CAAAC,KAAA,CAAAH,YAAA,CAAAC,OAAA;MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}